# 定义要移除的应用程序列表
$remove_appx = @("SecHealthUI")

# 定义跳过列表（如有需要可为空）
$skip = @()

# 获取所有用户的预配包和已安装包
$provisioned = Get-AppxProvisionedPackage -Online
$appxpackage = Get-AppxPackage -AllUsers

# 定义其他必要的变量
$eol = @()
$store = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Appx\AppxAllUserStore'
$users = @('S-1-5-18')

# 如果存在指定的存储路径，则添加其他用户的 SID
if (Test-Path $store) {
    $users += (Get-ChildItem $store -ErrorAction SilentlyContinue | Where-Object { $_.PSChildName -like '*S-1-5-21*' }).PSChildName
}

# 关闭 UAC 通过修改注册表
# 注意：此操作需要重启计算机才能生效
function Disable-UAC {
    Write-Output "正在关闭 UAC..."
    $uacKey = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System'
    Set-ItemProperty -Path $uacKey -Name "EnableLUA" -Value 0
    Set-ItemProperty -Path $uacKey -Name "ConsentPromptBehaviorAdmin" -Value 0
    Set-ItemProperty -Path $uacKey -Name "ConsentPromptBehaviorUser" -Value 0
    Write-Output "UAC 已关闭。更改需要重启计算机才能生效。"
}

# 调用函数来关闭 UAC
Disable-UAC

# 处理每个要移除的应用程序
foreach ($choice in $remove_appx) {
    if ($choice.Trim() -eq '') { continue }

    foreach ($appx in $provisioned | Where-Object { $_.PackageName -like "*$choice*" }) {
        $next = $true
        foreach ($no in $skip) {
            if ($appx.PackageName -like "*$no*") { $next = $false }
        }
        if (-not $next) { continue }

        $PackageName = $appx.PackageName
        $PackageFamilyName = ($appxpackage | Where-Object { $_.Name -eq $appx.DisplayName }).PackageFamilyName

        # 在存储路径中创建必要的目录
        New-Item -Path "$store\Deprovisioned\$PackageFamilyName" -Force | Out-Null
        foreach ($sid in $users) {
            New-Item -Path "$store\EndOfLife\$sid\$PackageName" -Force | Out-Null
        }

        $eol += $PackageName
        dism /Online /Set-NonRemovableAppPolicy /PackageFamily:$PackageFamilyName /NonRemovable:0 | Out-Null
        Remove-AppxProvisionedPackage -PackageName $PackageName -Online -AllUsers | Out-Null
    }

    foreach ($appx in $appxpackage | Where-Object { $_.PackageFullName -like "*$choice*" }) {
        $next = $true
        foreach ($no in $skip) {
            if ($appx.PackageFullName -like "*$no*") { $next = $false }
        }
        if (-not $next) { continue }

        $PackageFullName = $appx.PackageFullName

        # 在存储路径中创建必要的目录
        New-Item -Path "$store\Deprovisioned\$appx.PackageFamilyName" -Force | Out-Null
        foreach ($sid in $users) {
            New-Item -Path "$store\EndOfLife\$sid\$PackageFullName" -Force | Out-Null
        }

        $eol += $PackageFullName
        dism /Online /Set-NonRemovableAppPolicy /PackageFamily:$PackageFamilyName /NonRemovable:0 | Out-Null
        Remove-AppxPackage -Package $PackageFullName -AllUsers | Out-Null
    }
}

# 禁用 Windows Defender 的功能
Set-MpPreference -DisableRealtimeMonitoring $true
Set-MpPreference -DisableBlockAtFirstSeen $true
Set-MpPreference -SubmitSamplesConsent NeverSend
Set-MpPreference -DisableBehaviorMonitoring $true
Set-MpPreference -DisableIOAVProtection $true
Set-MpPreference -DisableAutoExclusions $true

# 尝试卸载 Windows Defender 组件（可能效果有限）
try {
    # 如果可能，卸载 Windows Defender Antivirus 功能
    Get-WindowsFeature -Name Windows-Defender-Features | Remove-WindowsFeature
    Get-WindowsFeature -Name Windows-Defender-Features | Uninstall-WindowsFeature
} catch {
    Write-Output "卸载 Windows Defender 组件失败。Windows Defender 深度集成于 Windows 操作系统中，可能无法完全移除。"
}

# 通过 DISM 完全移除 Defender（可能效果有限）
try {
    dism /Online /Disable-Feature /FeatureName:Windows-Defender-Features
} catch {
    Write-Output "通过 DISM 禁用 Windows Defender 功能失败。"
}
